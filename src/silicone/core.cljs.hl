(ns silicone.core
  (:require [hoplon.core :refer [ensure-kids!]]))

(defn- elem-ctor
  [tag]
  (fn [& args]
    (-> js/document (.createElement tag) ensure-kids! (apply args))))

(defn import-elements [elements & [path]]
  (let [link #(let [path  (or path "bower_components")
                    plist (cond (keyword? %) [path (-> % name str) (-> % name str)]
                                (vector?  %) (into [path] (map (fn [x] (-> x name str)) (flatten %)))
                                :else %)
                    path (clojure.string/join "/" plist)
                    fullpath (clojure.string/join [path ".html"])]
                (link :rel "import" :href fullpath))]
    (into [] (map link elements))))

(def dom-module (elem-ctor "dom-module"))

(def template   (elem-ctor "template"))

(defmethod do! :selected
  [elem _ v]
  (.setAttribute (goog.dom.getElement elem) "selected" v))
